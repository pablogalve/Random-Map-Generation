#include "Procedural_Map_Gen.h"
#include "j1App.h"
#include "j1Map.h"
#include "p2Log.h"

Procedural_Map_Gen::Procedural_Map_Gen()
{
	name.create("procedural_map");
}

Procedural_Map_Gen::~Procedural_Map_Gen()
{
}

bool Procedural_Map_Gen::Awake(pugi::xml_node& config) {
	
	LOG("Loading Procedural Map Data");
	bool ret = true;
		
	frequency = config.child("frequency").attribute("value").as_float();
	default_seed = config.child("default_seed").attribute("value").as_float();

	return ret;
}

int Procedural_Map_Gen::generateSeed() {
	//TODO 4: Generate a random seed
	/*
		Generate a new seed
		Seeds are usually created using current time in milliseconds
	*/

	//Returns current time in milliseconds
	//We'll use that as a seed
	msec = time(NULL) * 1000;

	return msec;
}

void Procedural_Map_Gen::generatePerlinNoise() {
	//We use always the same seed
	generatePerlinNoise(default_seed);
}

void Procedural_Map_Gen::generatePerlinNoise(unsigned int seed)
{
	//TODO 1: Generate Perlin Noise
	//Create a new FastNoise object
	FastNoise myNoise; // Create a FastNoise object

	//Default noise type is Simplex
	//But we need Perlin Noise
	myNoise.SetNoiseType(FastNoise::Perlin); // Set the desired noise type
		
	myNoise.SetSeed(seed);
	/*
		Default frequency is 0.01
		You can modify that value as you want
		However, I would recommend to keep a range from 0.03 to 0.07
	*/
	myNoise.SetFrequency(0.05); 

	for (int x = 0; x < 100; x++)
	{
		for (int y = 0; y < 100; y++)
		{
			//TODO 2.1: Store Perlin Noise
			/*
				We need to store values generated by Perlin Noise
				You have to get noise at the coordinates [x][y] 
				and store that value in height_map variable (inside App->map)
			*/


			//TODO 2.2: Adjust Perlin Noise to 0-1
			/*
				We have to ensure that noise is always between 0 and 1
				But you'll notice that the function sometimes returns a negative value
				So, after getting noise you have to apply that formula:: (Noise + 1) * 0.5
				This solution is provided by the author of the c++ noise library
			*/
			App->map->height_map[x][y] = (myNoise.GetNoise(x, y) + 1) * 0.5;

			LOG("Noise on x: %i y: %i is: %f", x, y, App->map->height_map[x][y]);
		}
	}
}